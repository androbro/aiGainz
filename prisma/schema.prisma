generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Exercise {
  id                Int               @id @default(autoincrement())
  name              String
  description       String?
  primaryMuscle     MuscleType        @relation("PrimaryMuscle", fields: [primaryMuscleId], references: [id])
  primaryMuscleId   Int
  secondaryMuscle   MuscleType?       @relation("SecondaryMuscle", fields: [secondaryMuscleId], references: [id])
  secondaryMuscleId Int?
  equipment         WorkoutEquipment  @relation(fields: [equipmentId], references: [id])
  equipmentId       Int
  difficulty        String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  WorkoutExercise   WorkoutExercise[]
  chartDataPoints   ChartDataPoint[]
}

model MuscleType {
  id                 Int              @id @default(autoincrement())
  name               String           @unique
  primaryExercises   Exercise[]       @relation("PrimaryMuscle")
  secondaryExercises Exercise[]       @relation("SecondaryMuscle")
  ChartDataPoint     ChartDataPoint[]
}

model WorkoutEquipment {
  id             Int               @id @default(autoincrement())
  name           String            @unique
  type           EquipmentType
  category       EquipmentCategory
  location       EquipmentLocation
  exercises      Exercise[]
  ChartDataPoint ChartDataPoint[]
}

model Workout {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  WorkoutExercise WorkoutExercise[]
}

model WorkoutExercise {
  id                Int              @id @default(autoincrement())
  workout           Workout          @relation(fields: [workoutId], references: [id])
  workoutId         Int
  exercise          Exercise         @relation(fields: [exerciseId], references: [id])
  exerciseId        Int
  order             Int
  sets              Int
  reps              Int
  weight            Float            @default(0)
  minutesToComplete Int
  restBetweenSets   Int
  notes             String?
  ChartDataPoint    ChartDataPoint[]
}

model Card {
  id        Int       @id @default(autoincrement())
  title     String
  period    DateTime?
  type      CardType  @default(EMPTY)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  chart     Chart     @relation(fields: [chartId], references: [id], onDelete: Cascade)
  chartId   Int       @unique
}

model Chart {
  id                  Int           @id @default(autoincrement())
  label               String
  fill                Boolean
  borderColor         String?
  tension             Float
  pointRadius         Float
  showLegend          Boolean       @default(true)
  showXAxis           Boolean       @default(true)
  showYAxis           Boolean       @default(true)
  maintainAspectRatio Boolean       @default(true)
  responsive          Boolean       @default(true)
  width               Int?
  height              Int?
  card                Card?
  dataType            ChartDataType
  dataSourceId        Int
}

model ChartDataPoint {
  id                 Int               @id @default(autoincrement())
  date               DateTime
  score              Float
  exerciseId         Int?
  exercise           Exercise?         @relation(fields: [exerciseId], references: [id])
  muscleTypeId       Int?
  muscleType         MuscleType?       @relation(fields: [muscleTypeId], references: [id])
  workoutEquipmentId Int?
  workoutEquipment   WorkoutEquipment? @relation(fields: [workoutEquipmentId], references: [id])
  workoutExerciseId  Int?
  workoutExercise    WorkoutExercise?  @relation(fields: [workoutExerciseId], references: [id])
}

model GlobalSetting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EquipmentType {
  MACHINE
  CABLE
  SMITH_MACHINE
  TRAP_BAR
  BARBELL
  EZ_BAR
  DUMBELLS
  KETTLEBELLS
  RESISTANCE_BANDS
  TRX
  BODYWEIGHT
  MISC
  CARDIO
}

enum EquipmentCategory {
  CARDIO
  STRENGTH
  BALANCE
  FLEXIBILITY
  RECOVERY
}

enum EquipmentLocation {
  HOME
  GYM
  OUTDOOR
}

enum ChartDataType {
  EXERCISE
  MUSCLE_TYPE
  WORKOUT_EQUIPMENT
  WORKOUT_EXERCISE
  EQUIPMENT_TYPE
  EQUIPMENT_CATEGORY
}

enum CardType {
  EMPTY
  MAIN
}
